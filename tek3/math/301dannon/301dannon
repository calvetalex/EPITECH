#!/usr/bin/env python3

import sys
import math
from copy import deepcopy

debug = False

def option(err = 0):
    print("USdataGE\n\t./301dannon file [--debug]")
    print("DESCrightSideIPTION\n\tfile\tfile that contains the numbers to be sorted, separated by spaces")
    print("\t--debug\tdebug mode")
    sys.exit(err)

def print_err(msg):
    print(msg, file=sys.stderr)

def getDataFromFile(file):
    data = []
    try:
        with open(file, 'r') as f:
            fInfo = f.read()
            infos = fInfo.split(' ')
            for info in infos:
                try:
                    data.append(float(info))
                except ValueError:
                    raise ValueError
    except FileNotFoundError:
        print_err("Impossible to open file.")
        sys.exit(84)
    except ValueError:
        raise(ValueError)
    return data

def print_arr(arr):
    for elem in arr:
        print(f'{elem} ', end='')
    print()

def selectionSort(data):
    global debug
    it = 0
    if len(data) == 1:
        return 0
    for i in range(len(data)): 
        min_idx = i 
        for j in range(i + 1, len(data)):
            it += 1
            if data[min_idx] > data[j]: 
                min_idx = j        
        data[i], data[min_idx] = data[min_idx], data[i]
    if debug:
        print_arr(data)
    return it

def insertionSort(data):
    global debug
    it = 0
    if len(data) == 1:
        return 0
    arraySize = len(data)
    for i in range(1, arraySize): 
        key = data[i] 
        j = i - 1
        it += 1
        while j >= 0 and key < data[j]:
            it += 1
            data[j + 1] = data[j] 
            j -= 1
        data[j + 1] = key
    if debug:
        print_arr(data)
    return it

def bubbleSort(data):
    global debug
    it = 0
    if len(data) == 1:
        return 0
    arraySize = len(data) 
    for i in range(arraySize): 
        for j in range(0, arraySize - i - 1):
            if data[j] > data[j + 1] : 
                data[j], data[j + 1] = data[j + 1], data[j]
            it += 1
    if debug:
        print_arr(data)
    return it

quickIt = 0

def quickSort(data):
    global quickIt
    if data:
        pivot = data[0]
        low = [d for d in data if d < pivot]
        high = [d for d in data[1:] if d >= pivot]
        quickIt += len(low) + len(high)
        if debug:
            print_arr(data)
        return quickSort(low) + [pivot] + quickSort(high)
    else:
        return []

def mergeSort(data, it = 0):
    global debug
    if len(data) == 1:
        return 0
    mid = len(data) // 2
    leftSide = data[:mid]
    rightSide = data[mid:]
    it += mergeSort(leftSide)
    it += mergeSort(rightSide)
    i = j = k = 0
    while i < len(leftSide) and j < len(rightSide): 
        it += 1
        if leftSide[i] < rightSide[j]: 
            data[k] = leftSide[i] 
            i += 1
        else: 
            data[k] = rightSide[j] 
            j += 1
        k += 1 
    while i < len(leftSide): 
        data[k] = leftSide[i] 
        i += 1
        k += 1
      
    while j < len(rightSide):
        data[k] = rightSide[j] 
        j += 1
        k += 1
    if debug:
        print_arr(data)
    return it

def manageSort(data):
    global debug
    if len(data) > 1:
        print(f'{len(data)} elements')
    else:
        print(f'{len(data)} element')
    if debug:
        print("\n\nSELECTION:")
    print(f'Selection sort: {selectionSort(deepcopy(data))} comparisons')
    if debug:
        print("\n\nINSERTION")
    print(f'Insertion sort: {insertionSort(deepcopy(data))} comparisons')
    if debug:
        print("\n\nBUBBLE")
    print(f'Bubble sort: {bubbleSort(deepcopy(data))} comparisons')
    if debug:
        print("\n\nQUICK")
    quickSort(deepcopy(data))
    print(f'Quicksort: {quickIt} comparisons')
    if debug:
        print("\n\nMERGE")
    print(f'Merge sort: {mergeSort(deepcopy(data))} comparisons')

def process(file):
    try:
        data = getDataFromFile(file)
    except ValueError:
        print_err("file given is not a valid file. Please try ./301dannon -h")
        return 84
    manageSort(data)
    return 0

def main():
    global debug
    if "--debug" in sys.argv:
        debug = True
        sys.argv.remove('--debug')
    if len(sys.argv) != 2:
        option(84)
    else:
        arg = sys.argv[1]
        if arg == "-h" or arg == "--help":
            option()
        else:
            sys.exit(process(arg))

main()