#!/usr/bin/env python3

import sys
import math
from copy import deepcopy

USAGE = '''
USAGE:
    ./306radiator n ir jr [i j]

DESCRIPTION:
    n           size of the room
    (ir, jr)    coordinates of the radiator
    (i, j)      coordinates of a point in the room
'''
H = 0.5

def printErr(msg="ERROR: aborting program"):
    ''' Write msg on stderr '''
    print(msg, file=sys.stderr)

def printMatrix(m):
    ''' print a list of list '''
    for line in m:
        print('\t'.join(str(elem) for elem in line))
    print()

def gauss(matrix_A, n, ir, jr):
    ''' Gauss-Newton algorithm '''
    def getPartialPivot(matrix_A, j):
        ''' find pivot value '''
        y = j
        for i in range(j, len(matrix_A)):
            if abs(matrix_A[i][j]) > abs(matrix_A[y][j]):
                y = i
        return y
    matrix_F = [0.0 for x in range(n**2)]
    matrix_Y = [0.0 for x in range(n**2)]
    matrix_Y[ir * n + jr] = -300.0
    for i in range(0, len(matrix_A) - 1):
        j = getPartialPivot(matrix_A, i)
        matrix_A[i],matrix_A[j] = matrix_A[j],matrix_A[i]
        matrix_Y[i],matrix_Y[j] = matrix_Y[j],matrix_Y[i]
        for k in range(i + 1, len(matrix_A)):
            m = (float(matrix_A[k][i]) * - 1.0) / float(matrix_A[i][i])
            matrix_A[k] = [a + b for a, b in zip(matrix_A[k], [x * m for x in matrix_A[i]])]
            matrix_Y[k] = matrix_Y[k] + m * matrix_Y[i]
    for i in range(len(matrix_A) - 1, -1, -1):
        for k in range(i + 1, len(matrix_A)):
            matrix_Y[i] = matrix_Y[i] - float(matrix_A[i][k]) * matrix_F[k]
        matrix_F[i] = matrix_Y[i] / float(matrix_A[i][i])
    return matrix_F

def createMatrix(n):
    ''' init default matrix '''
    def setMatrix(matrix, n, offset):
        ''' set temperature values in the room '''
        y = 0
        for i in range(n + 1 + offset, 2 * n - 1 + offset):
            x = 0
            xn = 0
            point = [1 + y + offset, n + y + offset, n + y + 1 + offset, n + y + 2 + offset, 2*n + y + 1 + offset]
            coeff = [1, 1, -4, 1, 1]
            for elem in matrix[i]:
                if x in point:
                    matrix[i][x] = int((1 / H**2) * (coeff[xn]))
                    xn = xn + 1
                x = x + 1
            y = y + 1
        for i in range(2*n - 1 + offset, 2*n + 1 + offset):
            matrix[i][i] = 1
        return y + 2
    matrix = [[0 for x in range(n**2)] for y in range(n**2)]
    for i in range(0, n + 1):
        matrix[i][i] = 1
    offset = 0
    while (offset + n) < (n**2 - 1 - n):
        offset = offset + setMatrix(matrix, n, offset)
    for i in range(n + offset, n**2):
        matrix[i][i] = 1
    return matrix

def main(argv):
    ''' main function: start program and call logical function '''
    try:
        n = int(argv[1])
        ir = int(argv[2])
        jr = int(argv[3])
        if n <= 0 or (ir < 0 or ir > n - 1) or (jr < 0 or jr > n):
            sys.exit(84) 
        if n < 1 or (n * ir + jr) > n**2:
            sys.exit(84)
        matrix = createMatrix(n)
        gaussMatrix = gauss(deepcopy(matrix), n, ir, jr)
        if len(argv) == 4:
            printMatrix(matrix)
            for elem in gaussMatrix:
                print(round(elem + 0.001, 1))
        else:
            i = int(argv[4])
            j = int(argv[5])
            if (i < 0 or i > n) or (j < 0 or j > n):
                sys.exit(84)
            if (n * i + j) > n**2:
                sys.exit(84) 
            print(round(gaussMatrix[n * i + j] + 0.001, 1))
    except ValueError:
        printErr("ERROR: bad argument givent, please see ./306radiator -h")
        sys.exit(84)
    sys.exit(0)

if __name__=="__main__":
    if len(sys.argv) < 4 or len(sys.argv) > 6:
        if "-h" in sys.argv:
            print(USAGE)
            sys.exit(0)
        else:
            printErr(USAGE)
            sys.exit(84)
    main(sys.argv)